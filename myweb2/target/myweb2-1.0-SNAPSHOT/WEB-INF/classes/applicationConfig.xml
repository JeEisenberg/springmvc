<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd 
       http://www.springframework.org/schema/mvc 
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/tx 
       http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--    引入外部配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!--  配置数据源   德鲁伊-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc_driver}"/>
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
        <property name="maxActive" value="${jdbc_maxActive}"/>
        <property name="initialSize" value="${jdbc_initialSize}"/>
    </bean>


    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--    开启事务注解-->
    <tx:annotation-driven/>


    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--        配置数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--        配置mybatis核心配置文件位置-->
        <property name="configLocation" value="classpath:mybatisConfig.xml"/>
    </bean>
    <!--    通过MapperScannerConfigurer的配置方式-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.gavin.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <context:component-scan base-package="com.gavin"/>
    <mvc:annotation-driven/>

    <!--

        模板过滤器
     &lt;!&ndash;   <mvc: interceptor>中的子元素必须按照上述代码的配置顺序进行编写，
        即<mvc: mapping…/>→<mvc: exclude-mapping…/>→<bean…/>的顺序，否则文件会报错。
    &ndash;&gt;
        <mvc:interceptors>
    &lt;!&ndash;        配置拦截器  全局拦截器 拦截所有的请求&ndash;&gt;
            <bean class="com.gavin.InterCeptor.AllInterceptor"/>
            <mvc:interceptor>
    &lt;!&ndash;            配置作用范围&ndash;&gt;
                <mvc:mapping path="/dataOne/**"/>
    &lt;!&ndash;            配置例外情况 如果配置了,那么path不能为空&ndash;&gt;
                <mvc:exclude-mapping path="/interceptorDemo/**"/>
    &lt;!&ndash;            对匹配路径的请求才拦截&ndash;&gt;
                <bean class="com.gavin.InterCeptor.EmpInterceptor"/>
            </mvc:interceptor>

            <mvc:interceptor>
                <mvc:mapping path="/toAdd.do"/>
               <bean class="com.gavin.InterCeptor.DeptInterceptor"/>
            </mvc:interceptor>
        </mvc:interceptors>

    -->


    <mvc:interceptors>
        <!--        全局拦截器-->
        <!--        <bean  class="com.gavin.InterCeptor.UserInterceptor"/>-->
        <mvc:interceptor>
            <!--            局部拦截器-->
            <mvc:mapping path="/**"/>
            <bean class="com.gavin.InterCeptor.UserInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
    <!--    给静态资源放行-->
    <!--    mapping url中的路径-->
    <!--    location对应的据路径-&#45;&#45;项目中的资源路径-->


    <mvc:resources mapping="/static/**" location="/static/"/>
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"/>
</beans>